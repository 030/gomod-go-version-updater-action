---
name: gomod-go-version-updater-action
description: gomod-go-version-updater-action
inputs:
  extra-pr-label:
    description: |
      Whether an extra PR label is required.
  github-token-for-downloading-private-go-modules:
    description: |
      Whether private go modules have to be downloaded.
  gomod-go-version-updater-action-log-level:
    description: |
      Change the default INFO log level to: DEBUG, WARNING, ERROR or CRITICAL.
runs:
  using: "composite"
  steps:
    - name: display the gh cli version
      run: gh --version
      shell: bash
    - uses: actions/checkout@v5.0.0
      with:
        ref: main
        fetch-depth: 0
    - name: set branch name
      run: |
        echo "DEPENDENCIES_LABEL=dependencies" >> $GITHUB_ENV
        echo "GO_LABEL=go" >> $GITHUB_ENV
        echo "GOMOD_GO_VERSION_UPDATER_LABEL=gomod-go-version-updater" >> $GITHUB_ENV
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH=update-go-version-in-go-mod-file" >> $GITHUB_ENV
      shell: bash
    - uses: actions/setup-python@v5.6.0
      with:
        python-version: 3.9.18
    - name: Install dependencies
      run: |
        pip install ${{ github.action_path }}
      shell: bash
    - name: Create labels
      run: |
        check_label_exists() {
          local label_name="$1"

          LABEL_EXISTS=$(
            gh label list --json name |
            jq -r '
              .[] |
              select(.name == "'"$label_name"'") |
              .name
            '
          )
          if [ -z "$LABEL_EXISTS" ]; then
            echo "label: '${label_name}' does NOT exist"
            return 1
          fi
        }
        if ! check_label_exists ${DEPENDENCIES_LABEL}; then
          gh label create "${DEPENDENCIES_LABEL}" \
            --color "#0366d6" \
            --description "Pull requests that update a dependency file"
        fi
        if ! check_label_exists ${GO_LABEL}; then
          gh label create "${GO_LABEL}" \
            --color "#16e2e2" \
            --description "Pull requests that update Go code"
        fi
        if ! check_label_exists ${GOMOD_GO_VERSION_UPDATER_LABEL}; then
          gh label create "${GOMOD_GO_VERSION_UPDATER_LABEL}" \
            --color "#F50BAB" \
            --description "Pull requests that update Go version in the go.mod file"
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
    - name: update go version and push branch
      run: |
        git fetch -p -P

        if (git ls-remote --exit-code --heads origin refs/heads/${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}); then
          echo "Branch '${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}' already exists."
          git checkout ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}
        else
          git checkout -b ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}
        fi

        python --version
        python3 --version

        if [ -n "${{ inputs.gomod-go-version-updater-action-log-level }}" ]; then
          export GOMOD_GO_VERSION_UPDATER_ACTION_LOGGING_LEVEL=${{ inputs.gomod-go-version-updater-action-log-level }}
          echo "GOMOD_GO_VERSION_UPDATER_ACTION_LOGGING_LEVEL: ${GOMOD_GO_VERSION_UPDATER_ACTION_LOGGING_LEVEL}"
        fi
        export GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT=$(gomod-go-version-updater 2>&1)
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT: ${GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT}"

        export GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT=$(echo ${GOMOD_GO_VERSION_UPDATER_ACTION_OUTPUT} |\
          grep "bump golang version" |\
          sed "s|.*\(bump.*\)|\1|" |\
          head -n 1)
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT: ${GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT}"

        export GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE="build(deps): ${GOMOD_GO_VERSION_UPDATER_ACTION_NEW_GOLANG_VERSION_OUTPUT}"
        echo "GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE: ${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}"

        if [ -n "$(git status --porcelain)" ]; then echo "There are uncommitted changes."; else echo "No changes to commit." && exit 0; fi

        go_mod_file="go.mod"
        echo "adding ${go_mod_file} file(s)..."
        find . -name "${go_mod_file}" -exec git add {} +

        echo "adding nested Dockerfiles..."
        find . -name 'Dockerfile' -exec git add {} +

        echo "git config user..."
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com

        echo "git commit..."
        if ! git commit -m "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}"; then git commit --amend --no-edit; fi

        echo "git push..."
        git push origin ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH} -f

        if gh pr list --json title | jq -e '.[] | select(.title | test("build\\(deps\\): bump golang version from .* to .*"))'; then
          echo "PR exists already. Updating the 'title' and 'description'..."
          gh pr edit ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH} \
            --body "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}" \
            --title "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}"
          exit 0
        fi

        labels=("${DEPENDENCIES_LABEL}" "${GO_LABEL}" "${GOMOD_GO_VERSION_UPDATER_LABEL}")
        if [ -n "${{ inputs.extra-pr-label }}" ]; then
          labels+=("${{ inputs.extra-pr-label }}")
        fi
        echo "Labels:"
        for label in "${labels[@]}"; do
          echo "'$label'"
        done

        echo "creating pr..."
        label_args=()
        for label in "${labels[@]}"; do
          label_args+=(--label "$label")
        done

        gh pr create \
          --base main \
          --body "${GOMOD_GO_VERSION_UPDATER_ACTION_MESSAGE}" \
          --fill \
          --head "${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH}" \
          "${label_args[@]}"
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
    - uses: actions/setup-go@v5.5.0
      with:
        go-version: 'stable'
        cache: false
    - run: |
        git config --global url.https://${{ inputs.github-token-for-downloading-private-go-modules }}@github.com/.insteadOf https://github.com/
      shell: bash
      if: ${{ inputs.github-token-for-downloading-private-go-modules != '' }}
    - name: go mod tidy
      run: |
        CURRENT_DIR=$(pwd)
        for DIR in $(find . -name "go.mod" -exec dirname {} +); do
          cd $DIR
          echo "Running 'go mod tidy' in $DIR"
          go mod tidy
          cd $CURRENT_DIR
        done
      shell: bash
    - name: commit and force push if needed
      run: |
        if [ -n "$(git status --porcelain)" ]; then echo "There are uncommitted changes."; else echo "No changes to commit." && exit 0; fi

        git add .
        git commit --amend --no-edit
        git push origin ${GOMOD_GO_VERSION_UPDATER_ACTION_BRANCH} -f
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
